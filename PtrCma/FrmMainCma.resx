<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="cmdBnkStnd.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>